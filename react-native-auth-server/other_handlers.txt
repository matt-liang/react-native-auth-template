// func CreateUser(response http.ResponseWriter, request *http.Request) {
// 	response.Header().Set("content-type", "application/json")
// 	var creds Credentials
// 	_ = json.NewDecoder(request.Body).Decode(&creds)
// 	collection := client.Database("AuthLabs").Collection("CredentialSet")
// 	result, _ := collection.InsertOne(context.TODO(), creds)
// 	json.NewEncoder(response).Encode(result)
// }

// func GetUsers(response http.ResponseWriter, request *http.Request) {
// 	response.Header().Set("content-type", "application/json")
// 	var users []Credentials
// 	collection := client.Database("AuthLabs").Collection("CredentialSet")
// 	ctx, _ := context.WithTimeout(context.Background(), 30*time.Second)
// 	cursor, err := collection.Find(ctx, bson.M{})
// 	if err != nil {
// 		response.WriteHeader(http.StatusInternalServerError)
// 		response.Write([]byte(`{ "message": "` + err.Error() + `" }`))
// 		return
// 	}
// 	defer cursor.Close(ctx)
// 	for cursor.Next(ctx) {
// 		var creds Credentials
// 		cursor.Decode(&creds)
// 		users = append(users, creds)
// 	}
// 	if err := cursor.Err(); err != nil {
// 		response.WriteHeader(http.StatusInternalServerError)
// 		response.Write([]byte(`{ "message": "` + err.Error() + `" }`))
// 		return
// 	}
// 	json.NewEncoder(response).Encode(users)
// }

// func GetUser(response http.ResponseWriter, request *http.Request) {
// 	response.Header().Set("content-type", "application/json")
// 	params := mux.Vars(request)
// 	uid := params["username"]
// 	var creds Credentials
// 	collection := client.Database("AuthLabs").Collection("CredentialSet")
// 	ctx, _ := context.WithTimeout(context.Background(), 30*time.Second)
// 	err := collection.FindOne(ctx, Credentials{Username: uid}).Decode(&creds)
// 	if err != nil {
// 		response.WriteHeader(http.StatusInternalServerError)
// 		response.Write([]byte(`{ "message": "` + err.Error() + `" }`))
// 		return
// 	}
// 	json.NewEncoder(response).Encode(creds)
// }